/*
 * #1: Assuming '(' means go up and ')' means go down, which floor will you end up on given the input? The building you are in has an 
 * infinite number of floors and an infinite number of basements. You start at floor 0.
 * Your input is: ()))))()))(()(())))()((()()(())))(()((((()(())())()()()))))((())()))))()(((()))((()(((((()(()(((())()()()(((((()))(
 * )(()()()))))))((())()))))))))))())()()))(((()((()(()(()()((()))()))())(())((())()((((()(((()())(())()(()(((()(()()(()((()())())())
 * ))(()())(())()())(()(()))((()(((())((((()()((()(((((()())(((()())(((()((((()()()())()))(()))())))))(((((((()()))()()(((()(()((()((
 * ()())((()))()((())))(())((())))))(()(()()))()))())())()((((())))())(()))((((())(((())))))(()(()))()((())))))))()))()(()))))(((()))
 * ())(()())())()(()())(()()))()()()(()())))((()(()((((()()()))()((()()()()()))()))(()()(()))((((((())()))((()(((())()()(((())(()()()
 * ))(())(((()((((((()(((((()((())()((())())()())))))(((())(())(()())(())((((()((())))()))())())))))())((())()))())())()(())))((((()(
 * ((((((((()(()()))(()(()))))()()()(((())(()(((()()()())(()((((((()()(())))(((())((()(()))())(((())))(((()(()(()(()()(())))(((())())
 * ())))))((()))()))(())(())(())((()(()()())(((())))()((())())(())(())(()))()()(()(()()))))()())))(()))(()()))))()((()))))()(())()(((
 * )))()()())(())(()())(()()()))((())()(())())())()())(()()(()(((((()())(()(((((())((((()())()((()(((()())((()))())((((())()))((()(((
 * (((((((())()()((((()()))))()(()(()()())()(((((((()(()(()))(()())(())))(((())())((()(((()())(()()))(())))))(())()))(((()))))))()()(
 * ()()(((((()))())()(()))(()()()()())()))()((((()((())((()(())()()((())((())()()((((((((())(())())((()))((())(())(((()()((()())(((()
 * ((((()()()())(()))(())((())(()((((()(()((())())())))))())((((())()))())))))((())))())(()
 */

let firstTaskInput= "()))))()))(()(())))()((()()(())))(()((((()(())())()()()))))((())()))))()(((()))((()(((((()(()(((())()()()(((((()" +
    "))()(()()()))))))((())()))))))))))())()()))(((()((()(()(()()((()))()))())(())((())()((((()(((()())(())()(()(((()(()()(()((()())(" +
    "))())))(()())(())()())(()(()))((()(((())((((()()((()(((((()())(((()())(((()((((()()()())()))(()))())))))(((((((()()))()()(((()((" +
    ")((()((()())((()))()((())))(())((())))))(()(()()))()))())())()((((())))())(()))((((())(((())))))(()(()))()((())))))))()))()(()))" +
    "))(((()))())(()())())()(()())(()()))()()()(()())))((()(()((((()()()))()((()()()()()))()))(()()(()))((((((())()))((()(((())()()((" +
    "(())(()()()))(())(((()((((((()(((((()((())()((())())()())))))(((())(())(()())(())((((()((())))()))())())))))())((())()))())())()" +
    "(())))((((()(((((((((()(()()))(()(()))))()()()(((())(()(((()()()())(()((((((()()(())))(((())((()(()))())(((())))(((()(()(()(()()" +
    "(())))(((())())())))))((()))()))(())(())(())((()(()()())(((())))()((())())(())(())(()))()()(()(()()))))()())))(()))(()()))))()((" +
    "()))))()(())()((()))()()())(())(()())(()()()))((())()(())())())()())(()()(()(((((()())(()(((((())((((()())()((()(((()())((()))()" +
    ")((((())()))((()((((((((((())()()((((()()))))()(()(()()())()(((((((()(()(()))(()())(())))(((())())((()(((()())(()()))(())))))(()" +
    ")()))(((()))))))()()(()()(((((()))())()(()))(()()()()())()))()((((()((())((()(())()()((())((())()()((((((((())(())())((()))((())" +
    "(())(((()()((()())(((()((((()()()())(()))(())((())(()((((()(()((())())())))))())((((())()))())))))((())))())(()";
window.alert("First task answer: " + firstTaskFloorCount(firstTaskInput));

function firstTaskFloorCount(firstTaskInput) {
    return firstTaskInput.replace(/[^(]/g, "").length - firstTaskInput.replace(/[^)]/g, "").length;
}
/*
 * #2: Assuming '<' means left, '>' means right, '^' means up and 'v' means down, you start at a position in the middle of a huge field,
  * where you have more than enough room to move. You start walking according to the directions in input. How many positions did you 
  * visit more than once? The position you start in is considered a visit.
 * Your input is: v>v^<^<v^<vv^v><^<<<>v>>^>>>v^<^v^<>>vv^v><>^>^v<^<<^vv><v>>>^><^>^<^<v>^vv<^<v>>v>>vvv^v^^>>v<<vvv<<^v^vv<^>vv>v<>>><
 * <<>v><>><>^vv<<><v><v<>v^^^<<<<^<>v<v<v<^>v^<<^v>^^^>>^>><^>><^^<vv^><v><vv^v>^^^^<^<v<<^>^>>^^v<v^v^<v>^vv^^v<<v^^<^^^vv^>>vvv^v^^<^
 * <vvv^^><>^<>v>^^^<<^^>>^>>>v<vvv><>^>v<^>^v>vv>>><^^>^v>vv>^><>^^v^>^^>>^><><^^^<<v>vvvv>><^>^>^^<<>^<><>>v><v>^<v^><^>^>>v<v^v^^>><<
 * <^^<^^^vv^>^^v<^><^^v^>>vvv>>v^vv<v^<vv^<<>><<^<v>^>v<v^<<v<^^v><><<^>>^<vv<^v^>^^vvv><<^v^v<v^vv>><^><v<<>>^v^>^^^v>><^^><>>^><>vvv^
 * ^^>^^^>>>^<^>><^v^<<vv>v^><><<<^^vvv><v<<^>>v<vv<<^^^v><><<<>>vv<>v<<<<<>v<^<v^^v>^<<<^^^^<vv>^>v>^>^>v>^^>vv<^v<^v>v>^^<>>^v>^>><^><
 * v>>^v>v<v><^<vv^>>v^vvv>>^v^^^^<v<>><v^v>>^v^^><^>v>>v^v<<<v<vvv>^<<<^^^^^>>>>>^<^<v<v>^^>^<>^<<<<>v<<^<vv^>^>>^vv>^<^v<^^v>vvv^>v>v<
 * v><^^^>>v>>v<v<^v><<^<^v>v<v^<vv<^><v<<>v^<^v^><vvv<^<^>v<>^^v<^v>^<<>vv<>^<<>^vv<v<^<^<>>>v^v^<>^^v^>v<^vv^v^<>v^v<v>vv>v^>>v<v^^<>v
 * ^^^vv<v>vvvv><><^<>^^>>v^><<v^<vv>>vv><^v<^v^^v>v^^>^>^^vv>><^>>^^>><><v^>vv<<^>><v>vv<<>v^^><v<<v>^^<v^^>>v>>^>v<<>>v<<v^^<^vv<v<<<v
 * ^><^vv>^>>>v<>><^<>^v<vvvv<^>v^>^v>^<<^v>^>vv>^<v>^^<<^>^v>^<>>><>v<v<>^<v>^^^<^<<^<>vv<^v>^vv><>><^v>^>v><v<<^vv<v<<v><<<^^<<vvv<><<
 * >v><<v^>>>v>^vv><^^^><><><<v>^v>>>^v<>^>v<vv^^<^v<><<v<<>v><^v^^<<>^<<>v<^v<<>v^^<^v><vvv>>><>>>>>>v>>vv<^^^><<>^v<^>vvvv^<v>>vv^v>>>
 *     ^>v<>v>^>>^^<^^vv^><<^^^^v><^v^<^^v>>v^<^><v^>^<>v<<<>>^vvv>^>^>v<<v<v^<^^<><vvv^<>>^^><<v<><v^^v>>vvv<vvv^>>^<v^^<><^^<>^^v^>^<v
 *     ^v<<<v<v<><^v<^^v^v>>v^v<<><v>^<^^v^><v^v<>v<v<v>^<vv>^>v>v<^^^<>^v<v<^^vv>><><>>^^v<vv><>vvv>v><^v^^>v^^^>^>^<
 */

let secondTaskInput= "v>v^<^<v^<vv^v><^<<<>v>>^>>>v^<^v^<>>vv^v><>^>^v<^<<^vv><v>>>^><^>^<^<v>^vv<^<v>>v>>vvv^v^^>>v<<vvv<<^v^vv<^>vv>" +
    "v<>>><<<>v><>><>^vv<<><v><v<>v^^^<<<<^<>v<v<v<^>v^<<^v>^^^>>^>><^>><^^<vv^><v><vv^v>^^^^<^<v<<^>^>>^^v<v^v^<v>^vv^^v<<v^^<^^^vv^>" +
    ">vvv^v^^<^<vvv^^><>^<>v>^^^<<^^>>^>>>v<vvv><>^>v<^>^v>vv>>><^^>^v>vv>^><>^^v^>^^>>^><><^^^<<v>vvvv>><^>^>^^<<>^<><>>v><v>^<v^><^>" +
    "^>>v<v^v^^>><<<^^<^^^vv^>^^v<^><^^v^>>vvv>>v^vv<v^<vv^<<>><<^<v>^>v<v^<<v<^^v><><<^>>^<vv<^v^>^^vvv><<^v^v<v^vv>><^><v<<>>^v^>^^^" +
    "v>><^^><>>^><>vvv^^^>^^^>>>^<^>><^v^<<vv>v^><><<<^^vvv><v<<^>>v<vv<<^^^v><><<<>>vv<>v<<<<<>v<^<v^^v>^<<<^^^^<vv>^>v>^>^>v>^^>vv<^" +
    "v<^v>v>^^<>>^v>^>><^><v>>^v>v<v><^<vv^>>v^vvv>>^v^^^^<v<>><v^v>>^v^^><^>v>>v^v<<<v<vvv>^<<<^^^^^>>>>>^<^<v<v>^^>^<>^<<<<>v<<^<vv^" +
    ">^>>^vv>^<^v<^^v>vvv^>v>v<v><^^^>>v>>v<v<^v><<^<^v>v<v^<vv<^><v<<>v^<^v^><vvv<^<^>v<>^^v<^v>^<<>vv<>^<<>^vv<v<^<^<>>>v^v^<>^^v^>v" +
    "<^vv^v^<>v^v<v>vv>v^>>v<v^^<>v^^^vv<v>vvvv><><^<>^^>>v^><<v^<vv>>vv><^v<^v^^v>v^^>^>^^vv>><^>>^^>><><v^>vv<<^>><v>vv<<>v^^><v<<v>" +
    "^^<v^^>>v>>^>v<<>>v<<v^^<^vv<v<<<v^><^vv>^>>>v<>><^<>^v<vvvv<^>v^>^v>^<<^v>^>vv>^<v>^^<<^>^v>^<>>><>v<v<>^<v>^^^<^<<^<>vv<^v>^vv>" +
    "<>><^v>^>v><v<<^vv<v<<v><<<^^<<vvv<><<>v><<v^>>>v>^vv><^^^><><><<v>^v>>>^v<>^>v<vv^^<^v<><<v<<>v><^v^^<<>^<<>v<^v<<>v^^<^v><vvv>>" +
    "><>>>>>>v>>vv<^^^><<>^v<^>vvvv^<v>>vv^v>>>^>v<>v>^>>^^<^^vv^><<^^^^v><^v^<^^v>>v^<^><v^>^<>v<<<>>^vvv>^>^>v<<v<v^<^^<><vvv^<>>^^>" +
    "<<v<><v^^v>>vvv<vvv^>>^<v^^<><^^<>^^v^>^<v^v<<<v<v<><^v<^^v^v>>v^v<<><v>^<^^v^><v^v<>v<v<v>^<vv>^>v>v<^^^<>^v<v<^^vv>><><>>^^v<vv" +
    "><>vvv>v><^v^^>v^^^>^>^<";
window.alert("Second task answer: " + secondTaskRoomTravel(secondTaskInput));

function secondTaskRoomTravel(secondTaskInput) {
    let listOfLocations = [];
    let X = 0;
    let Y = 0;
    let answer = 0;

    listOfLocations.push({x:X,y:Y,numOfVisits:0});

    for (let i = 0 ; i < secondTaskInput.length ; i++){
        getNextLocation(secondTaskInput.charAt(i));
        if(!checkIfListContainsLocation(listOfLocations,{x:X,y:Y})){
            listOfLocations.push({x:X,y:Y,numOfVisits:0});
        }
    }
    return answer;

    /*help functions*/
    function getNextLocation(char) {
        if(char==='v'){Y--;}
        else if(char==='^'){Y++;}
        else if(char==='>'){X++;}
        else if(char==='<'){X--;}
    }

    function checkIfListContainsLocation() {
        for (let i = 0; i < listOfLocations.length; i++) {
            if (listOfLocations[i].x === X && listOfLocations[i].y === Y) {
                listOfLocations[i].numOfVisits++;
                if(listOfLocations[i].numOfVisits === 1){answer++}
                return true;
            }
        }
        return false;
    }
    /*help functions*/
}
